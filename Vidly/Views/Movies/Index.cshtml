@model IEnumerable<Movie>
@{
    ViewData["Title"] = "Movies";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Grid.js CSS -->
<link href="https://unpkg.com/gridjs/dist/theme/mermaid.min.css" rel="stylesheet" />

<!-- Grid.js Script -->
<script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>

<h1>Movies</h1>
<p>
    @Html.ActionLink("New Movie", "New", "Movies", null, new { @class = "btn btn-primary" })
</p>

<div id="movies"></div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            new gridjs.Grid({
                columns: [
                    {
                        name: 'Movie',
                        sort: arguments[0] ? true : false, // Enable sorting if arguments[0] is provided
                        formatter: (cell, row) => gridjs.html(`<a href="/Movies/Edit/${row.cells[3].data}">${cell}</a>`)
                    },
                    {
                        name: 'Genre',
                        sort: true, // Enable sorting for Genre
                        formatter: (cell) => cell
                    },
                    {
                        name: 'Delete',
                        formatter: (cell, row) => gridjs.html(`<button onclick="deleteMovie(${row.cells[3].data})" class="btn btn-link text-danger p-0">Delete</button>`)
                    },
                    {
                          name: 'ID',
                        hidden: true // Hide the ID column
                    }
                ],
                search: true,
                pagination: {
                    enabled: true,
                    limit: 5
                },
                sort: true,
                server: {
                    url: '/api/movies',
                    then: data => data.map(movie => [
                        movie.name,
                        movie.genre.name,
                            '', // Placeholder for the delete button
                        movie.id
                    ])
                },
                style: {
                    table: 'table table-striped table-bordered',
                    th:'text-dark bg-light'
                }
            }).render(document.getElementById("movies"));
        });

            function deleteMovie(movieId) {
                    if (!confirm("Are you sure you want to delete this movie?")) return;

                        fetch(`/api/movies/${movieId}`, {
                            method: 'DELETE'
                        })
                        .then(response => {
                                if (response.ok) {
                                    // Remove the movie row from the Grid.js table
                                    const grid = gridjs.Grid.get(document.getElementById("movies"));
                                    grid.updateConfig({
                                        server: {
                                            url: '/api/movies',
                                            then: data => data.map(movie => [
                                                movie.name,
                                                movie.name,
                                                    '', // Placeholder for the delete button
                                                movie.id
                                            ])
                                        }
                                    }).forceRender();
                                    alert("Movie deleted successfully.");
                                } else {
                                    alert("Failed to delete movie.");
                                }
                            });
            }
    </script>
}